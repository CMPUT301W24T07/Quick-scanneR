// javadocs generated by chatgpt 3.5
// this file just handles all the profile editing and displaying functionality

package com.example.quickscanner.ui.profile;

import static android.text.InputType.TYPE_CLASS_TEXT;
import static android.text.InputType.TYPE_NULL;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Log;
import android.view.MenuItem; // Import Menu class
import androidx.annotation.NonNull;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.example.quickscanner.FirebaseController;
import com.example.quickscanner.R;
import com.example.quickscanner.model.Profile;
import com.example.quickscanner.model.User;
import com.google.android.gms.tasks.OnCanceledListener;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentSnapshot;
import com.squareup.picasso.Picasso;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;


/**
 * This class represents the Profile Activity, allowing users to view and edit their profile information.
 */

public class ProfileActivity extends AppCompatActivity {

    Button editButton;
    EditText nameEdit;
    EditText emailEdit;
    EditText linkedinEdit;
    ImageView profileImage;
    Bitmap profileBitMap;
    boolean editMode;

    User myUser;
    Profile myProfile;
    FirebaseController fbController;
    /**
     * Called when the activity is first created.
     *
     * @param savedInstanceState A Bundle containing the activity's previously saved state, if any.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Set the content view to the profile activity layout.
        setContentView(R.layout.activity_profile);

        // Initialize FirebaseController for Firebase operations.
        fbController = new FirebaseController();

        // Log the current user's UID.
        Log.w("error", fbController.getCurrentUserUid());
        Log.w("error", "weird p1");

        // Initialize the ActivityResultLauncher for handling image selection.
        ActivityResultLauncher<Intent> activityResultLauncher =
                registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
                    if (result.getResultCode() == Activity.RESULT_OK) {
                        // Process the result when an image is selected from the gallery.
                        Intent data = result.getData();
                        Uri uri = data.getData();
                        try {
                            profileBitMap = MediaStore.Images.Media.getBitmap(getContentResolver(), uri);
                            profileImage.setImageBitmap(profileBitMap);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    }
                });

        // Fetch user data from Firebase.
        fbController.getUser(fbController.getCurrentUserUid()).addOnCompleteListener(task -> {
            // Log messages...
            if (task.isSuccessful()) {
                // Process the result when the user data retrieval is successful.
                DocumentSnapshot document = task.getResult();
                if (document.exists()) {
                    // Extract user information from the document.
                    myUser = document.toObject(User.class);
                    myProfile = myUser.getUserProfile();

                    // Log message...

                    // Initialize UI elements.
                    editButton = findViewById(R.id.edit_button);
                    nameEdit  = findViewById(R.id.nameEdit);
                    emailEdit = findViewById(R.id.emailEdit);
                    linkedinEdit  = findViewById(R.id.socialEdit);
                    profileImage = findViewById(R.id.profileImage);

                    // Set initial values for EditText fields and download profile image.
                    nameEdit.setText(myProfile.getName());
                    emailEdit.setText(myProfile.getEmail());
                    linkedinEdit.setText(myProfile.getWebsite());
                    fbController.downloadImage(myProfile.getImageUrl()).addOnCompleteListener(task1 -> {
                        String url = String.valueOf(task1.getResult());
                        Picasso.get().load(url).into(profileImage);
                    });

                    // Handle profile image click event for editing.
                    profileImage.setOnClickListener(v -> {
                        if (editMode) {
                            Intent galleryIntent = new Intent(Intent.ACTION_PICK);
                            galleryIntent.setData(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                            activityResultLauncher.launch(galleryIntent);
                        }
                    });

                    // Handle edit button click event for toggling between edit and save modes.
                    editButton.setOnClickListener(v -> {
                        if (!editMode) {
                            // Enable EditText fields for editing.
                            nameEdit.setInputType(TYPE_CLASS_TEXT);
                            emailEdit.setInputType(TYPE_CLASS_TEXT);
                            linkedinEdit.setInputType(TYPE_CLASS_TEXT);
                            editMode = !editMode;
                            editButton.setText("Save");
                        } else {
                            // Save the edited profile information.
                            myProfile.setName(String.valueOf(nameEdit.getText()));
                            myProfile.setEmail(String.valueOf(emailEdit.getText()));
                            myProfile.setWebsite(String.valueOf(linkedinEdit.getText()));
                            if (profileBitMap != null) {
                                // Upload the new profile image if available.
                                myProfile.setImageUrl(myUser.getUid());
                                ByteArrayOutputStream boas = new ByteArrayOutputStream();
                                profileBitMap.compress(Bitmap.CompressFormat.JPEG, 100, boas);
                                byte[] imageData = boas.toByteArray();
                                fbController.uploadImage(myUser.getUid(), imageData);
                            }

                            // Update user data in Firebase.
                            myUser.setUserProfile(myProfile);
                            fbController.updateUser(myUser);

                            // Disable EditText fields after saving.
                            nameEdit.setInputType(TYPE_NULL);
                            emailEdit.setInputType(TYPE_NULL);
                            linkedinEdit.setInputType(TYPE_NULL);
                            editMode = !editMode;
                            editButton.setText("Edit");
                        }
                    });
                } else {
                    // Log message when the document doesn't exist.
                    Log.w("error", "not working:( exists");
                }
            } else {
                // Log message when the user data retrieval is not successful.
                Log.w("error", "not working:( isSuccessful");
            }
        }).addOnFailureListener(e -> Log.w("error", e)).addOnCanceledListener(() -> {
            // Log message when the user data retrieval is canceled.
            Log.w("error", ":33");
        });

        // Set edit mode to false.
        editMode = false;

        // Set up the back button in the action bar.
        Objects.requireNonNull(getSupportActionBar()).setDisplayHomeAsUpEnabled(true);

    }

    /**
     * Handles the top bar menu item clicks.
     *
     * @param item The selected menu item.
     * @return Returns true if the menu item is handled, false otherwise.
     */
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            // Handle the Back button press by finishing the activity.
            finish();
            return true;
        }
        return super.onOptionsItemSelected(item);

    }
}
